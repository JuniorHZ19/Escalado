{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JuniorHZ19/HerramientasIA/blob/main/pruebacolorful5.5ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install bing_image_downloader"
      ],
      "metadata": {
        "id": "epPtKzsnp7lk",
        "outputId": "c154b1c5-eed6-4ed3-fcf9-50dbd0c157fb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting bing_image_downloader\n",
            "  Downloading bing_image_downloader-1.1.2-py3-none-any.whl (5.9 kB)\n",
            "Installing collected packages: bing_image_downloader\n",
            "Successfully installed bing_image_downloader-1.1.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from bing_image_downloader import downloader\n",
        "\n",
        "\n",
        "downloader.download(\"paisajes\", limit=50,  output_dir='dataset',\n",
        "                    adult_filter_off=True, force_replace=False, timeout=60)"
      ],
      "metadata": {
        "id": "ocSehdqMp-mc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!wget http://data.vision.ee.ethz.ch/cvl/DIV2K/DIV2K_train_HR.zip\n",
        "!unzip DIV2K_train_HR.zip # This is our dataset link. I will include this command in the description"
      ],
      "metadata": {
        "id": "hsgw-_4AS6fv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown # *0) ** Instalando libreria(OBLIGATORIO)\n",
        "\n",
        "!pip install torch torchvision torchaudio\n"
      ],
      "metadata": {
        "id": "R0Je-JZAxuYY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown # *1) ** Clase Para manejo de directorios de datasets de imagenes\n",
        "\n",
        "\n",
        "import os\n",
        "import cv2\n",
        "import pandas as pd\n",
        "from PIL import Image\n",
        "import torch\n",
        "from torchvision import transforms\n",
        "# Recorre el directorio  y elmiina los archvios que no tiene las extensioens permitidas\n",
        "\n",
        "class DataSetManage:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        " def comprobar_ext_directorios(self,directorio):\n",
        "\n",
        "  for clase,[directorio,etiquetas] in(directorio.items()):\n",
        "   lista_directorio=os.listdir(directorio)\n",
        "   self._validarExt(directorio)\n",
        "\n",
        "\n",
        "\n",
        " def  _validarExt(self,directorio):\n",
        "  print(directorio)\n",
        "   # Extensiones permitidas\n",
        "  extensiones_permitidas = {\".jpg\", \".jpeg\", \".png\"}\n",
        "  for root, dirs, files in os.walk(directorio):\n",
        "\n",
        "    for file in files:\n",
        "        # Obtiene la extensión del archivo\n",
        "        _, extension = os.path.splitext(file)\n",
        "\n",
        "        # Verifica si la extensión no está en la lista de extensiones permitidas y elimina el archivo\n",
        "        if extension.lower() not in extensiones_permitidas:\n",
        "            archivo_a_eliminar = os.path.join(root, file)\n",
        "            os.remove(archivo_a_eliminar)\n",
        "            print(f\"Se eliminó: {archivo_a_eliminar}\")\n",
        "\n",
        "\n",
        "# Cambia nombre de cada archivo dentro del directorio a un valor secuencial\n",
        "\n",
        " def cambiar_nombres_directorios(self,directorio):\n",
        "   for clase,[directorio,etiquetas] in(directorio.items()):\n",
        "     lista_directorio=os.listdir(directorio)\n",
        "     self._cambiarNombre(directorio,clase)\n",
        "     print(directorio)\n",
        "\n",
        "\n",
        " def _cambiarNombre(self,directorios,subfijo):\n",
        "  archivos_en_directorio = os.listdir(directorios)\n",
        "  for i, archivo in enumerate(archivos_en_directorio, start=1):\n",
        "    # Construir el nuevo nombre del archivo\n",
        "    nuevo_nombre = f\"{subfijo}{i}{os.path.splitext(archivo)[1]}\"\n",
        "\n",
        "    # Ruta completa del archivo antiguo y nuevo\n",
        "    ruta_antigua = os.path.join(directorios, archivo)\n",
        "    ruta_nueva = os.path.join(directorios, nuevo_nombre)\n",
        "\n",
        "    # Cambiar el nombre del archivo\n",
        "    os.rename(ruta_antigua, ruta_nueva)\n",
        "    print(f\"Se cambió el nombre de {ruta_antigua} a {ruta_nueva}\")\n",
        "\n",
        "\n",
        "#Obtiene la cantidad de elemntos que tiene la carpeta\n",
        "\n",
        " def len_directorio(self,directorio):\n",
        "    cantidad_elementos = sum(1 for elemento in os.listdir(directorio) if os.path.isfile(os.path.join(directorio, elemento)))\n",
        "    return cantidad_elementos\n",
        "\n",
        "\n",
        "#----------------------------------------------------------------------------------------------\n",
        "\n",
        "#Valida si la imagen se puede leer usando  pill o cv2 si no se puede leer se elimina\n",
        "\n",
        " def validar_Img_Pill(self,directorio,):\n",
        "  for etiqueta,[directorio,clase] in(directorio.items()):\n",
        "\n",
        "    lista_paths=os.listdir(directorio)\n",
        "    self._validarLecturaImgPill(directorio,lista_paths)\n",
        "  print(f\"Se ah validado todas las imagenes\")\n",
        "\n",
        " def validar_Img_cv2(self,directorio):\n",
        "  for etiqueta,[directorio,clase] in(directorio.items()):\n",
        "\n",
        "    lista_paths=os.listdir(directorio)\n",
        "    self._validarLecturaImg(directorio,lista_paths)\n",
        "  print(f\"Se ah validado todas las imagenes\")\n",
        "\n",
        " def _validarLecturaImg(self,directorio,lista):\n",
        "\n",
        "  for ruta in(lista):\n",
        "   imagen=cv2.imread(directorio+ruta)\n",
        "   if  imagen is None:\n",
        "     os.remove(directorio+ruta)\n",
        "     print(f\"No se pudo leer y se elimino archivo:{directorio+ruta}\")\n",
        "\n",
        " def _validarLecturaImgPill(self,directorio,lista):\n",
        "    for ruta in(lista):\n",
        "     try:\n",
        "      imagen=Image.open(directorio+ruta)\n",
        "     except Exception as e:\n",
        "      os.remove(directorio+ruta)\n",
        "      print(f\"Archivo '{directorio+ruta}' eliminado.\")\n",
        "\n",
        "\n",
        "\n",
        "#vamos a recorrer el dicionario y validar ruta por ruta si se puede leer sino se elminara\n",
        "#vamos guaradno al mismo tiempo 3 listas, los directorios , listas de paths de los directiros y de las clases ,para usarlo luego usarlo al crear el csv\n",
        "\n",
        " def separar_datos_directorios(self,directorios):\n",
        "  listas_directorios=[]\n",
        "  listas_listas_directorios=[]\n",
        "  listas_clases=[]\n",
        "\n",
        "  for etiqueta,[directorio,clase] in(directorios.items()):\n",
        "\n",
        "       lista_paths=os.listdir(directorio)\n",
        "       listas_directorios.append(directorio)\n",
        "       listas_listas_directorios.append(lista_paths)\n",
        "       listas_clases.append(clase)\n",
        "\n",
        "  return listas_directorios,listas_listas_directorios,listas_clases\n",
        "\n",
        " def emparejar_listas_paths(self,lista_listas):\n",
        "\n",
        "   #Tomamos el minimo tamaño dentro de las lista de cada clase\n",
        "   tamaño_minimo = min(len(arr) for arr in lista_listas)\n",
        "\n",
        "   #Vamos a emparejar todas las listas con un tamaño igual que sea la del minimo tamaño de todas,esto para tener un set de datos parejo por cada clase\n",
        "   Reducido_lista_paths=[]\n",
        "\n",
        "   #Reduce cada lista de los paths a la cantidad minimo para que todos tenga iaugal cantidad\n",
        "   for listas in(lista_listas):\n",
        "    Reducido_lista_paths.append(listas[:tamaño_minimo])\n",
        "\n",
        "   return Reducido_lista_paths\n",
        "#---------------------------------------------------------------------------------\n",
        "\n",
        "\n",
        " def crear_paths_csv(self,directorio_base,lista_paths,clases,nombre_archivo):\n",
        "\n",
        "   columnas=[\"path\",\"etiqueta\"]\n",
        "   datos_csv=[]\n",
        "\n",
        "   for dir_base,dir_path,clase in  zip(directorio_base,lista_paths,clases):\n",
        "\n",
        "    for path  in (dir_path):\n",
        "\n",
        "     datos_csv.append([dir_base+path ,clase])\n",
        "\n",
        "\n",
        "   df_lista=pd.DataFrame(datos_csv,columns=columnas)\n",
        "   df_lista=df_lista.sort_values(by='path')\n",
        "   df_lista.to_csv(nombre_archivo,index=False)\n",
        "   print(\"Csv Creado\")\n",
        "#---------------------------------------------------------------------------------\n",
        "\n",
        "#devuelve cuatnos elemtnos tiene cada clase\n",
        " def total_elementos(self,directorio,csv_path):\n",
        "    df=pd.read_csv(csv_path)\n",
        "    for clase,[directorio,etiqueta] in (directorio.items()):\n",
        "     tamaño_etiqueta=(df[\"etiqueta\"] == etiqueta).sum()\n",
        "     print(f\"la clase {clase} tiene :{tamaño_etiqueta} elementos\")\n",
        "\n",
        "\n",
        "#-------------------------------------------------------------------------------------------------\n",
        "\n",
        "  #Funciones para data aumentation\n",
        " def   data_aumentation_conjunto(self,input_imagen_folder,output_path_folder,iteraciones,transformaciones,keepname=False):  #ingresa trnasformacioens como compose donde se aplicara las trasnfomracioens conjutnos pero se repteira un numero de veces por cada imagen\n",
        "\n",
        "   for filename in os.listdir(input_imagen_folder):\n",
        "\n",
        "    if filename.endswith('.jpg') or filename.endswith('.png'):\n",
        "\n",
        "        input_path = os.path.join(input_imagen_folder, filename)\n",
        "        if(keepname==False):\n",
        "         output_path = os.path.join(output_path_folder, f'transformed_{filename}')\n",
        "        else:\n",
        "          output_path = os.path.join(output_path_folder, f'{filename}')\n",
        "        # Aplica las transformaciones\n",
        "        print(output_path)\n",
        "        self._apply_transfomaciones_conjunto_it(input_path,output_path,int(iteraciones),transformaciones,keepname)\n",
        "\n",
        "\n",
        " def   data_aumentation_individual(self,input_imagen_folder,output_path_folder,transformaciones,keepname=False):  #las trnasfomaciones solo pasaremos la lista ya que ira aplicando la transformacion una por una por cada imagen\n",
        "\n",
        "  for filename in os.listdir(input_imagen_folder):\n",
        "\n",
        "    if filename.endswith('.jpg') or filename.endswith('.png'):\n",
        "        input_path = os.path.join(input_imagen_folder, filename)\n",
        "        if(keepname==False):\n",
        "         output_path = os.path.join(output_path_folder, f'transformed_{filename}')\n",
        "         print(\"opasasmos\")\n",
        "        else:\n",
        "          output_path = os.path.join(output_path_folder, f'{filename}')\n",
        "        # Aplica las transformaciones\n",
        "        self._apply_transfomaciones_conjunto(input_path,output_path,transformaciones,keepname)\n",
        "\n",
        "\n",
        "\n",
        " def _apply_transfomaciones_conjunto_it(self,input_imagen_path,output_iamgen_path,iteraciones,transformations=None,keepname=False): #aplica las transfomracioens  conjutas por iteracion y se guarda las iamgenes\n",
        "\n",
        "   imagen=Image.open(input_imagen_path)\n",
        "\n",
        "\n",
        "   for i in range(iteraciones):\n",
        "      imagen_trasformada=transformations(imagen)\n",
        "\n",
        "      out_root, out_extension = os.path.splitext(output_iamgen_path)\n",
        "      if(keepname==False):\n",
        "       imagen_trasformada.save(f\"{out_root}_{i}{out_extension}\")\n",
        "      else:\n",
        "        imagen_trasformada.save(f\"{out_root}{out_extension}\")\n",
        "\n",
        " def _apply_transfomaciones_conjunto(self,input_imagen_path,output_iamgen_path,transformations=None,keepname=False): #aplica las transfomracioens individuales  y se guarda las iamgenes\n",
        "\n",
        "  imagen=Image.open(input_imagen_path)\n",
        "\n",
        "  for i,transformacion in enumerate(transformations):\n",
        "   imagen_transformada=transformacion(imagen)\n",
        "   out_root, out_extension = os.path.splitext(output_iamgen_path)\n",
        "   if(keepname==False):\n",
        "     imagen_transformada.save(f\"{out_root}_{i}{out_extension}\")\n",
        "   else:\n",
        "      imagen_transformada.save(f\"{out_root}{out_extension}\")\n",
        "\n"
      ],
      "metadata": {
        "id": "4Byd3D3TT7Ov",
        "cellView": "form"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil\n",
        "\n",
        "shutil.rmtree(\"/content/imagenes\")"
      ],
      "metadata": {
        "id": "8ncQ8dAzehfx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "#Creamos las carpetas con las imagenes en hr y lw\n",
        "from PIL import Image\n",
        "#Creamos los arhcivo baja resolucion aparitr de imangenes alta resoulcion en hr , estos archios iran a carpaeta lw\n",
        "directorio_in=\"/content/dataset/paisajes/\"\n",
        "directorio_out=\"/content/imagenes/\"\n",
        "\n",
        "\n",
        "#antes de otrogar mediads de hr y lw , chekea como el generador va votando las resolucioens hr_fake segun la resolucion lw que especifics tiene qeu conicidr\n",
        "#ya que el discriminador necsita la misma medidades tanto para el hr y el hr_fake que genera el generador\n",
        "\n",
        "transformaciones_hr=transforms.Compose([\n",
        "transforms.Resize((60, 60),interpolation=transforms.InterpolationMode.BICUBIC),\n",
        "\n",
        "])\n",
        "\n",
        "\n",
        "datasetmanage=DataSetManage()\n",
        "datasetmanage.data_aumentation_conjunto(directorio_in,directorio_out,1,transformaciones_hr)\n",
        "\n",
        "sorted(directorio_out)\n",
        "\n"
      ],
      "metadata": {
        "id": "IGhbwh-jOnFT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "dmg=DataSetManage()\n",
        "directorio={\n",
        "     \"imagenes\":[\"/content/imagenes/\",1],\n",
        "}\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "listas_directorios,listas_paths_directorios,listas_clases=dmg.separar_datos_directorios(directorio)\n",
        "Dataset_csv=\"dataset.csv\" #nombre que tenda nuestlo csv\n",
        "dmg.crear_paths_csv(listas_directorios,listas_paths_directorios,listas_clases,Dataset_csv)\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Kzybet7nU6gH",
        "outputId": "6636b9a9-77cf-4737-cd5b-c2c1faad783a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Csv Creado\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#DEFNIIR DISPOSITIVO:\n",
        "if torch.cuda.is_available():\n",
        "    torch.cuda.empty_cache()\n",
        "    print(\"CUDA está disponible.\")\n",
        "    device = torch.device(\"cuda\")\n",
        "else:\n",
        "    print(\"CUDA no está disponible. Se utilizará la CPU.\")\n",
        "    device = torch.device(\"cpu\")"
      ],
      "metadata": {
        "id": "Q1hgFUL5RRgz",
        "outputId": "dedc3d7f-a8f5-4c24-f324-63eaaa462e08",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CUDA está disponible.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@markdown # *2) ** Creacion de clase DATASET(OBLIGATORIO)\n",
        "import torch\n",
        "from torch.utils.data import Dataset,DataLoader\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import cv2\n",
        "from PIL import Image\n",
        "from skimage.color import rgb2lab, lab2rgb\n",
        "\n",
        "class MiDataSet(Dataset):\n",
        "    def __init__(self, csv, transform=None):\n",
        "        self.data = pd.read_csv(csv)\n",
        "        self.path = self.data[\"path\"]\n",
        "        self.samples = self.data[\"path\"].shape[0]\n",
        "        self.transform = transform\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        ruta = self.path[idx]\n",
        "\n",
        "        # Abrir la imagen\n",
        "        img = Image.open(ruta).convert(\"RGB\")\n",
        "\n",
        "        l_channel,ab_channel =self.rgb_a_lab(img)\n",
        "\n",
        "        #normalizar:\n",
        "        ab_channel_normalizado=(((ab_channel+ 128) / 255) * 2) - 1  #normalizado ab que va de -128 a 127  a un rango -1 a 1 para que conicida con la salida de generador\n",
        "        l_channel_normalizado=l_channel/100 #normalizado l que va de 0-100 a un  rango 0-1\n",
        "\n",
        "        if self.transform:\n",
        "            l_tensor= self.transform(l_channel_normalizado)\n",
        "            ab_tensor = self.transform(ab_channel_normalizado)\n",
        "\n",
        "        return l_tensor, ab_tensor\n",
        "\n",
        "    def __len__(self):\n",
        "        return self.samples\n",
        "\n",
        "    def rgb_a_lab(self,img):\n",
        "\n",
        "      lab_image=rgb2lab(img)\n",
        "\n",
        "      # Separa los canales L y AB\n",
        "      l_channel = lab_image[:,:, 0]\n",
        "      ab_channel=lab_image[:,:, 1:]\n",
        "\n",
        "\n",
        "      return l_channel,ab_channel\n",
        "\n",
        "    def lab_a_rgb(self,l,ab):\n",
        "      rgb_image=np.zeros((256,256,3))\n",
        "      rgb_image[:,:,0]=l\n",
        "      rgb_image[:,:,1:]=ab\n",
        "      return lab2rgb(rgb_image)\n",
        "\n"
      ],
      "metadata": {
        "id": "5vcmR_ZKhkGs"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#CREANDO DATASETS Y DATALOADERS:\n",
        "from skimage.color import lab2rgb\n",
        "from skimage import io\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "from torchvision import datasets, transforms\n",
        "\n",
        "transformaciones = transforms.Compose([\n",
        "    transforms.ToTensor(),\n",
        "\n",
        "])\n",
        "\n",
        "batch_size=4\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "dataset =MiDataSet(\"/content/dataset.csv\",transformaciones)\n",
        "data_loader=DataLoader(dataset,batch_size=batch_size)\n",
        "\n",
        "l1,ab=dataset.__getitem__(2)\n",
        "\n",
        "ab_desnormalizado=((((ab+1)/2)*255))-128\n",
        "\n",
        "l1_desnormalizado=l1*100\n",
        "\n",
        "\n",
        "#Visualisando\n",
        "\n",
        "l1 = l1_desnormalizado.squeeze().numpy()\n",
        "ab = ab_desnormalizado.squeeze().permute(1, 2, 0).numpy()\n",
        "\n",
        "# Visualizar la imagen generada\n",
        "# Subfigura l1\n",
        "plt.subplot(1, 3, 1)\n",
        "plt.imshow(l1,cmap='gray')\n",
        "plt.title('l1')\n",
        "\n",
        "# Subfigura ab\n",
        "plt.subplot(1, 3, 2)\n",
        "\n",
        "img_ab = np.zeros((60, 60, 3))  # crea un array de ceros para la imagen RGB\n",
        "img_ab[:,:,1:] = ab\n",
        "plt.imshow(img_ab)\n",
        "plt.title('ab')\n",
        "\n",
        "\n",
        "# Subfigura rgb\n",
        "plt.subplot(1, 3, 3)\n",
        "\n",
        "img_rgb = np.zeros((60, 60, 3))  # crea un array de ceros para la imagen RGB\n",
        "img_rgb[:,:,0]=l1\n",
        "img_rgb[:,:,1:] = ab\n",
        "\n",
        "plt.imshow(lab2rgb(img_rgb))\n",
        "plt.title('rgb')\n",
        "\n",
        "# Ajustar diseño\n",
        "plt.tight_layout()\n",
        "\n",
        "# Mostrar las imágenes\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "nrIpUc77941u",
        "outputId": "09c0624c-fdb4-480d-8c90-bca933999d1b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        }
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "1WYVki2qv_EJ"
      },
      "outputs": [],
      "source": [
        "#@markdown # *0) ** Creando clase Discriminadora y Geneaadora:\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torchvision\n",
        "import torchvision.datasets as datasets\n",
        "from torch.utils.data import Dataset,DataLoader\n",
        "import torchvision.transforms as transforms\n",
        "from torch.utils.tensorboard import SummaryWriter\n",
        "import torch.nn.functional as F\n",
        "\n",
        "class Discriminator (nn.Module):\n",
        "  def __init__(self):\n",
        "   super(Discriminator,self).__init__()\n",
        "\n",
        "   self.conv1=nn.Conv2d(2,64,kernel_size=3,stride=1, bias=False)\n",
        "   self.conv2=nn.Conv2d(64,64,kernel_size=3,stride=2, bias=False)\n",
        "   self.btchnorm64=nn.BatchNorm2d(64)\n",
        "\n",
        "   self.conv3=nn.Conv2d(64,128,kernel_size=3,stride=1, bias=False)\n",
        "   self.conv4=nn.Conv2d(128,128,kernel_size=3,stride=2, bias=False)\n",
        "   self.btchnorm128=nn.BatchNorm2d(128)\n",
        "\n",
        "   self.flatt=nn.Flatten()\n",
        "\n",
        "   self.oculta1=nn.LazyLinear(1024)\n",
        "   self.salida= nn.LazyLinear(1)\n",
        "\n",
        "\n",
        "  def forward(self,x):\n",
        "\n",
        "    x=self.conv1(x)\n",
        "    x= nn.LeakyReLU(0.1)(x)\n",
        "\n",
        "    x=self.conv2(x)\n",
        "    x=self.btchnorm64(x)\n",
        "    x= nn.LeakyReLU(0.1)(x)\n",
        "\n",
        "    x=self.conv3(x)\n",
        "    x=self.btchnorm128(x)\n",
        "    x= nn.LeakyReLU(0.1)(x)\n",
        "\n",
        "    x=self.conv4(x)\n",
        "    x=self.btchnorm128(x)\n",
        "    x= nn.LeakyReLU(0.1)(x)\n",
        "\n",
        "\n",
        "    x=self.flatt(x)\n",
        "    x=self.oculta1(x)\n",
        "    x= nn.LeakyReLU(0.1)(x)\n",
        "\n",
        "    x=self.salida(x)\n",
        "    out=torch.sigmoid(x)\n",
        "\n",
        "    return out\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "discriminador=Discriminator()\n",
        "discriminador=discriminador.to(device)\n",
        "x=torch.randn(20,3,260,260).to(device)\n",
        "\n",
        "print(discriminador(x))"
      ],
      "metadata": {
        "id": "UJ1Z0_7emJxr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#---------------------GENERADOR BASADO EN U- NET---------------------------------------------------\n",
        "\n",
        "import torch.nn.functional as F\n",
        "\n",
        "#input debe ser 256x256 otras dimeneoins  puede que tenega eror al mometno de concat las dimenes reducidas debe de conicidir y este unetblacok se ajsuta a una etnrada 256x256\n",
        "class U_Net_block(nn.Module):\n",
        "\n",
        "  def __init__(self,in_channel,out_channel,type,activacion=\"leakyrelu\",dropout_on=\"False\"):\n",
        "   super(U_Net_block,self).__init__()\n",
        "\n",
        "   if type==\"down\" :\n",
        "\n",
        "    self.block=nn.Conv2d(in_channel,out_channel,kernel_size=3,stride=1,padding=1,bias=False)\n",
        "\n",
        "   elif type==\"up\":\n",
        "\n",
        "    self.block=nn.Conv2d(in_channel,out_channel,kernel_size=3,stride=1,padding=1,bias=False)\n",
        "\n",
        "   self.batchnorm=nn.BatchNorm2d(out_channel)\n",
        "\n",
        "   self.activacion=activacion\n",
        "   self.leakyrelu=nn.LeakyReLU(0.2)\n",
        "   self.relu=nn.ReLU()\n",
        "\n",
        "   self.dropout_on=dropout_on # solo si necsitmos usar el dropout\n",
        "\n",
        "   self.dropout=nn.Dropout(0.5)\n",
        "\n",
        "  def forward(self,x):\n",
        "\n",
        "     x=self.block(x)\n",
        "     x=self.batchnorm(x)\n",
        "\n",
        "     if(self.activacion==\"leakyrelu\"):\n",
        "      out=self.leakyrelu(x)\n",
        "     else:\n",
        "      out=self.relu(x)\n",
        "\n",
        "     if(self.dropout_on==True):\n",
        "      out=self.dropout(x)\n",
        "\n",
        "     return out\n",
        "\n",
        "\n",
        "class Generator_U_Net(nn.Module):\n",
        "\n",
        "    def __init__(self,in_channel=3):\n",
        "        super(Generator_U_Net,self).__init__()\n",
        "\n",
        "        # Encoder Seccion:\n",
        "\n",
        "        self.inicial=nn.Sequential(\n",
        "            nn.Conv2d(in_channel,64,kernel_size=3,stride=1,padding=1,bias=False), # primer bloque convolucional down no tiene batchnorm\n",
        "            nn.LeakyReLU(0.2)\n",
        "        )\n",
        "\n",
        "\n",
        "        self.encoder1=U_Net_block(64,128,\"down\",activacion=\"leakyrelu\")\n",
        "        self.encoder2=U_Net_block(128,128,\"down\",activacion=\"leakyrelu\")\n",
        "        self.encoder3=U_Net_block(128,256,\"down\",activacion=\"leakyrelu\")\n",
        "        self.encoder4=U_Net_block(256,256,\"down\",activacion=\"leakyrelu\")\n",
        "\n",
        "\n",
        "        self.bottleneck=nn.Sequential( nn.Conv2d(256,256,3,1,1,bias=False),\n",
        "                                       nn.ReLU())\n",
        "\n",
        "        # Decoder Seccion:\n",
        "\n",
        "        self.decoder1=U_Net_block(256,256,\"up\",activacion=\"relu\",dropout_on=False)\n",
        "        self.decoder2=U_Net_block(512,256,\"up\",activacion=\"relu\")\n",
        "        self.decoder3=U_Net_block(512,256,\"up\",activacion=\"relu\")\n",
        "        self.decoder4=U_Net_block(384,128,\"up\",activacion=\"relu\")\n",
        "        self.decoder5=U_Net_block(256,64,\"up\",activacion=\"relu\")\n",
        "\n",
        "\n",
        "        # Last\n",
        "\n",
        "        self.lastup=nn.Sequential(\n",
        "            nn.ConvTranspose2d(128,2,kernel_size=3,stride=1,padding=1,bias=False),\n",
        "            nn.Tanh(),\n",
        "        )\n",
        "\n",
        "    def forward(self,x):\n",
        "\n",
        "        e1=self.inicial(x) # e1 ->64 out\n",
        "        e2=self.encoder1(e1) # e2 ->128 out\n",
        "        e3=self.encoder2(e2) # e3 ->128 out\n",
        "        e4=self.encoder3(e3) # e4 ->256 out\n",
        "        e5=self.encoder4(e4) # e5 ->256 out\n",
        "\n",
        "        bneck=self.bottleneck(e5)  #bneck -> 256 out\n",
        "\n",
        "        d1=self.decoder1(bneck) #e1 -> 256 out\n",
        "        d2=self.decoder2(torch.cat([d1,e5],1)) # e2  in ->256+256=512  out->256\n",
        "        d3=self.decoder3(torch.cat([d2,e4],1)) # e3  in ->256+256=512   out->256\n",
        "        d4=self.decoder4(torch.cat([d3,e3],1)) # e4 in ->512+128=640   out->128\n",
        "        d5=self.decoder5(torch.cat([d4,e2],1)) # e5 in ->128+128=256    out->64\n",
        "\n",
        "        out=self.lastup(torch.cat([d5,e1],1)) # last in 64+64  out->3\n",
        "\n",
        "        return out"
      ],
      "metadata": {
        "id": "TuQmnT8vZej0"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#VAMOS A VER QUE MEDIADES EL GENERADOR DA COMO RESUTLADO CON LW RESOLUTIONS MEDIDAES:\n",
        "\n",
        "generador=Generator_U_Net(1)\n",
        "generador=generador.to(device)\n",
        "x=torch.randn(20,1,80,80).to(device)\n",
        "print(x[:,0,:,:].unsqueeze(1).shape)\n",
        "print(generador(x[:,0,:,:].unsqueeze(1)).shape)"
      ],
      "metadata": {
        "id": "Fyh-XN-zamlm",
        "outputId": "d42be846-c349-4c18-f979-cb7626741693",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([20, 1, 80, 80])\n",
            "torch.Size([20, 2, 80, 80])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.cuda.empty_cache()"
      ],
      "metadata": {
        "id": "M08R5diH1Dkw"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#PROBAMOS EL GENERADOR INCIAL:\n",
        "\n",
        "from PIL import Image\n",
        "from torchvision.transforms import ToTensor\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------------------------------------------------\n",
        "def show_comparacion(real,generado): #deben de ingrenar don tennoren de imagen generada y real\n",
        " print(generado.shape)\n",
        " print(real.shape)\n",
        " real=real.detach().squeeze().cpu().numpy().transpose(1, 2, 0)\n",
        " generado=generado.squeeze().cpu().detach().numpy().transpose(1, 2, 0)\n",
        "# Primer subgráfico: imagen original\n",
        " plt.subplot(1, 2, 1)\n",
        " plt.imshow(generado)  # Convertir a NumPy y transponer dimensiones\n",
        " plt.title('Imagen Generada')\n",
        " plt.axis('off')\n",
        "\n",
        "# Segundo subgráfico: imagen transformada\n",
        " plt.subplot(1, 2, 2)\n",
        " plt.imshow(real)  # Convertir a NumPy y transponer dimensiones\n",
        " plt.title('Imagen Real')\n",
        " plt.axis('off')\n",
        "\n",
        "# Ajustar el diseño para evitar superposición de títulos\n",
        " plt.tight_layout()\n",
        "\n",
        "# Mostrar la figura\n",
        " plt.show()\n",
        "\n",
        "\n",
        " plt.figure(figsize=(10, 5))\n",
        "#-----------------------------------------------------------------------------------\n",
        "generador=Generador().to(\"cpu\")\n",
        "\n",
        "ruta_imagen = \"/content/lw/transformed_hr_48_2.png\"\n",
        "imagen = Image.open(ruta_imagen)\n",
        "\n",
        "transformaciones = transforms.Compose([\n",
        "    transforms.Grayscale(num_output_channels=1),\n",
        "    transforms.ToTensor(),\n",
        "])\n",
        "\n",
        "#original iamgen tensor\n",
        "tensor_imagen = transformaciones(imagen).unsqueeze(0)\n",
        "tensor_imagen=tensor_imagen.to(\"cpu\")\n",
        "\n",
        "#imagen generada\n",
        "imagen_generada=generador(tensor_imagen[:,0,:,:].unsqueeze(1))\n",
        "print(imagen_generada.shape)\n",
        "imagen_numpy = imagen_generada.squeeze().detach().numpy()\n",
        "\n",
        "# Mostrar la imagen utilizando matplotlib\n",
        "plt.imshow(imagen_numpy.transpose(1, 2, 0))  # cmap='gray' es para mostrar la imagen en escala de grises\n",
        "plt.axis('off')  # Ocultar ejes\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "UjlYRf2XYly3",
        "outputId": "9081a384-3e19-4177-9de6-3ee5acec8b64",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 220
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'Generador' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-18-046d4c065757>\u001b[0m in \u001b[0;36m<cell line: 35>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     33\u001b[0m  \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;31m#-----------------------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m \u001b[0mgenerador\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mGenerador\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cpu\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0mruta_imagen\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/lw/transformed_hr_48_2.png\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'Generador' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DgHdGV5n7UdD"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.nn.functional as F\n",
        "import math\n",
        "\n",
        "#Funciones especiales para hallar metricas entre imagnes:\n",
        "#Usaremos psnr como metrica para comparar dos imagenes que tan iguales son este resultado dara pro desibeles (db) el ragno es de 0-40 donde 40db mas optimo\n",
        "\n",
        "\n",
        "def psnr(image1, image2):\n",
        "    mse = torch.mean((image1 - image2) ** 2)\n",
        "    if mse == 0:\n",
        "        return float('inf')\n",
        "    max_pixel = 1\n",
        "    psnr_value = 10 * torch.log10((max_pixel ** 2) / mse)\n",
        "    return psnr_value\n",
        "\n",
        "\n",
        "#Otra metrica es el ssmi, este parametro compara tanto el contraste,brillo y Similitud de estructura, el rango es [-1,1]\n",
        "\n",
        "\n",
        "def ssim_score(y_pred, y_true, w_size=11,sigma=1.5 ,size_average=True, full=False):\n",
        "\n",
        "    # Value range can be different from 255. Other common ranges are 1 (sigmoid) and 2 (tanh).\n",
        "    if torch.max(y_pred) > 128:\n",
        "        max_val = 255\n",
        "    else:\n",
        "        max_val = 1\n",
        "\n",
        "    if torch.min(y_pred) < -0.5:\n",
        "        min_val = -1\n",
        "    else:\n",
        "        min_val = 0\n",
        "    L = max_val - min_val\n",
        "\n",
        "    padd = 0\n",
        "    (_, channel, height, width) = y_pred.size()\n",
        "\n",
        "    # Gaussian filter\n",
        "    gauss = torch.Tensor([math.exp(-(x - w_size//2)**2/float(2*sigma**2)) for x in range(w_size)]).to(device)\n",
        "    window = gauss/gauss.sum().to(device)\n",
        "\n",
        "    # Create 2D window\n",
        "    _1D_window = window.unsqueeze(1)\n",
        "    _2D_window = _1D_window.mm(_1D_window.t()).float().unsqueeze(0).unsqueeze(0)\n",
        "    window = _2D_window.expand(channel, 1, w_size, w_size).contiguous().to(device)\n",
        "\n",
        "    # Convolution\n",
        "    mu1 = F.conv2d(y_pred, window, padding=padd, groups=channel)\n",
        "    mu2 = F.conv2d(y_true, window, padding=padd, groups=channel)\n",
        "    mu1_sq = mu1.pow(2)\n",
        "    mu2_sq = mu2.pow(2)\n",
        "    mu1_mu2 = mu1 * mu2\n",
        "\n",
        "    sigma1_sq = F.conv2d(y_pred * y_pred, window, padding=padd, groups=channel) - mu1_sq\n",
        "    sigma2_sq = F.conv2d(y_true * y_true, window, padding=padd, groups=channel) - mu2_sq\n",
        "    sigma12 = F.conv2d(y_pred * y_true, window, padding=padd, groups=channel) - mu1_mu2\n",
        "\n",
        "    C1 = (0.01 * L) ** 2\n",
        "    C2 = (0.03 * L) ** 2\n",
        "\n",
        "    v1 = 2.0 * sigma12 + C2\n",
        "    v2 = sigma1_sq + sigma2_sq + C2\n",
        "    cs = torch.mean(v1 / v2)  # contrast sensitivity\n",
        "\n",
        "    ssim_map = ((2 * mu1_mu2 + C1) * v1) / ((mu1_sq + mu2_sq + C1) * v2)\n",
        "\n",
        "    if size_average:\n",
        "        ret = ssim_map.mean()\n",
        "    else:\n",
        "        ret = ssim_map.mean(1).mean(1).mean(1)\n",
        "\n",
        "    if full:\n",
        "        return ret, cs\n",
        "    return ret\n",
        "\n"
      ],
      "metadata": {
        "id": "zd5E1dRIxmG8"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "img1 = torch.rand(1, 3, 11, 11).to(device)\n",
        "img2 = torch.rand(1, 3, 11, 11).to(device)\n",
        "\n",
        "\n",
        "ssim_value = ssim_score(img1, img2).to(\"cuda\")\n",
        "psnr_value = psnr(img1, img2)\n",
        "print(\"SSIM:\", ssim_value.item())\n",
        "print(\"psrn:\", psnr_value.item())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dlTZGixvxrdm",
        "outputId": "fbe75cce-66f5-4f54-cbeb-514b9825fba2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SSIM: 0.10368409007787704\n",
            "psrn: 7.960908889770508\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torchvision import models\n",
        "\n",
        "#vamos a extraer los feature es decir las caracteisicas imporantes que exiten entre ambas imagnes y compraralas esto se usara par luego hace rel loss contet apartir del contendio\n",
        "\n",
        "class Feature_Extractor(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(Feature_Extractor, self).__init__()\n",
        "        # Cargar un modelo VGG-19 preentrenado\n",
        "        vgg19_model = models.vgg19(pretrained=True).features.eval()\n",
        "\n",
        "        # No actualizar los pesos del modelo VGG durante el entrenamiento\n",
        "        for param in vgg19_model.parameters():\n",
        "            param.requires_grad = False\n",
        "\n",
        "        selected_layers = list(vgg19_model.children())[:35] #AGREGAMOS EL VGG HASTA VERFICAR QUE EL ULITMA CAPA NO TENGA RELU\n",
        "\n",
        "        self.vgg=nn.Sequential(*selected_layers)\n",
        "\n",
        "    def forward(self, img):\n",
        "\n",
        "        # Extraer características de las imágenes generada y real\n",
        "        feature_img = self.vgg(img)\n",
        "\n",
        "        return feature_img\n",
        "\n",
        "\n",
        "# TV Loss se utiliza comúnmente en tareas de generación de imágenes para reducir el ruido y fomentar la suavidad en las imágenes generadas.\n",
        "\n",
        "class TVLoss(nn.Module):\n",
        "  def __init__(self, tv_loss_weight=1):\n",
        "    super(TVLoss, self).__init__()\n",
        "    self.tv_loss_weight=tv_loss_weight\n",
        "  def forward(self, x):\n",
        "    batch_size=x.size()[0]\n",
        "    h_x = x.size()[2]\n",
        "    w_x = x.size()[3]\n",
        "\n",
        "    count_h = self.tensor_size(x[:, :, 1:, :])\n",
        "    count_w = self.tensor_size(x[:, :, :, 1:])\n",
        "\n",
        "\n",
        "    h_tv = torch.pow(x[:, :, 1:, :] - x[:, :, :h_x - 1, :], 2).sum()\n",
        "    w_tv = torch.pow(x[:, :, :, 1:] - x[:, :, :, :w_x - 1], 2).sum()\n",
        "    return self.tv_loss_weight * 2 * (h_tv / count_h + w_tv / count_w) / batch_size\n",
        "\n",
        "  # Forgot to implement an important method\n",
        "  @staticmethod # Must add this\n",
        "  def tensor_size(t):\n",
        "    return t.size()[1] * t.size()[2] * t.size()[3]\n",
        "\n"
      ],
      "metadata": {
        "id": "cnWH1y8fEpTb"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NFKcAGSnZYEr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vgg=Feature_Extractor()\n",
        "print(vgg)\n",
        "tv_loss= TVLoss()\n",
        "x=torch.randn(18,3,60,60)\n",
        "tv_loss=tv_loss(x)\n",
        "\n",
        "print(tv_loss)"
      ],
      "metadata": {
        "id": "AIEYS7UZNql6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "import numpy as np\n",
        "import torchvision.utils as vutils\n",
        "import sklearn\n",
        "from torchvision import transforms\n",
        "from torch.utils.data import DataLoader\n",
        "from torch.utils.data import TensorDataset\n",
        "from tqdm import tqdm\n",
        "# ...\n",
        "\n",
        "#d=Discriminator(image_dim).to(device)\n",
        "#g=Generador(dim_vector_ruido,image_dim).to(device)\n",
        "\n",
        "#d.load_state_dict(torch.load(\"/content/modelo_gatos_d.pt\"))\n",
        "#g.load_state_dict(torch.load(\"/content/modelo_gatos_g.pt\"))\n",
        "\n",
        "#d=d.to(device)\n",
        "#g=g.to(device)\n",
        "\n",
        "\n",
        "# Supongamos que ya has definido las instancias de los modelos Generador (g) y Discriminador (d),\n",
        "# y has configurado los optimizadores (g_optimizer y d_optimizer) y la función de pérdida (criterio).\n",
        "\n",
        "\n",
        "\n",
        "def GAN(discriminador, generador, data_loader, num_epochs, batch_size, criterio_g,criterio_d, d_optimizador, g_optimizador, device):\n",
        "\n",
        "    discriminador=discriminador.to(device)\n",
        "    generador=generador.to(device)\n",
        "    feature_extractor=Feature_Extractor().to(device)\n",
        "    tv_loss= TVLoss().to(device)\n",
        "    l1_loss=nn.L1Loss()\n",
        "\n",
        "    for epoch in range(num_epochs):\n",
        "\n",
        "        resultados = { 'd_loss':[],\"g_loss\":[], \"d_score\":[], \"psnr\":[],\"ssmi\":[] }\n",
        "        data_loader = tqdm(data_loader)\n",
        "\n",
        "        for  (l, ab) in (data_loader):\n",
        "\n",
        "\n",
        "            l=l.to(device)\n",
        "            ab=ab.to(device)\n",
        "\n",
        "            generador.eval()\n",
        "            discriminador.train()\n",
        "\n",
        "            real_ab = ab.float()\n",
        "\n",
        "            real_labels =torch.ones(ab.size(0), 1).to(device)\n",
        "\n",
        "            # Entrenar el discriminador con imágenes reales\n",
        "            d_optimizador.zero_grad()\n",
        "\n",
        "            prediction_real = discriminador(real_ab)\n",
        "\n",
        "            real_loss = criterio_d(prediction_real, real_labels)\n",
        "\n",
        "\n",
        "            # Entrenar el discriminador con imágenes generadas\n",
        "            fake_images = generador(l.float())\n",
        "            fake_labels = torch.zeros(l.size(0), 1).to(device)\n",
        "\n",
        "            prediction_fake = discriminador(fake_images)\n",
        "\n",
        "            fake_loss = criterio_d(prediction_fake, fake_labels).to(device)\n",
        "            discriminator_loss = (real_loss + fake_loss)/2\n",
        "\n",
        "            discriminator_loss.backward(retain_graph=True)\n",
        "\n",
        "            d_optimizador.step()\n",
        "\n",
        "            # Entrenar el generador\n",
        "            generador.train()\n",
        "            discriminador.eval()\n",
        "            g_optimizador.zero_grad()\n",
        "\n",
        "            generated_images = generador(l.float())\n",
        "            loss_g=criterio_d(discriminador(generated_images),real_labels) #loss del generador aparitr del disicmirnador que dice si es o no una imagen falsa\n",
        "\n",
        "            content_loss=criterio_g(generated_images,real_ab) #loss imagen dircamtetne entre igmagen genrada y real\n",
        "\n",
        "            #generated_features=feature_extractor(generated_images)\n",
        "            #real_features=feature_extractor(real_images)\n",
        "\n",
        "            #content_loss_vgg=(criterio_g(real_features,generated_features)) #loss de los features original y generado,esto aparitr de el vgg19\n",
        "\n",
        "           #calculando metricas opcional\n",
        "            psnr_batch=psnr(generated_images,real_ab).to(device)\n",
        "            ssmi_batch=ssim_score(generated_images,real_ab).to(device)\n",
        "\n",
        "            psnr_promedio=psnr_batch.mean()\n",
        "            ssmi_promedio=ssmi_batch.mean()\n",
        "\n",
        "            metricas_loss=((torch.abs(0.4-(0.01*psnr_promedio))/0.4)+torch.abs(0.1-(0.1*ssmi_promedio)))\n",
        "\n",
        "            #tv_losss=tv_loss(generated_images)\n",
        "            L1=l1_loss(generated_images,real_ab)\n",
        "\n",
        "            #generator_loss = loss_imagen+(torch.abs(0.39-(0.01*psnr_promedio)))+0.006*content_loss+(0.001*loss_g)+  2e-8 *tv_losss  #loss total del generador\n",
        "            generator_loss = 100*L1+0.001*(loss_g)#+10*torch.abs(0.1-(0.1*ssmi_promedio))#+ 2e-8 *(tv_losss)\n",
        "\n",
        "            generator_loss.backward()\n",
        "            g_optimizador.step()\n",
        "\n",
        "\n",
        "            #resultados por batch:\n",
        "            resultados[\"d_loss\"].append(discriminator_loss.item())\n",
        "            resultados[\"g_loss\"].append(generator_loss.item())\n",
        "            resultados[\"psnr\"].append(psnr_promedio.detach().cpu())\n",
        "            resultados[\"ssmi\"].append(ssmi_promedio.detach().cpu())\n",
        "\n",
        "            data_loader.set_description(desc=\"[%d/%d] Loss_D: %.4f Loss_G: %.4f psnr: %.4f ssmi: %.4f\" % (\n",
        "              epoch, num_epochs, np.mean(resultados['d_loss']),\n",
        "              np.mean(resultados['g_loss']) ,\n",
        "              np.mean( resultados['psnr']) ,\n",
        "              np.mean( resultados['ssmi']) ,\n",
        "               ))\n",
        "\n",
        "        data_loader.close()\n",
        "        # Imprimir estadísticas y visualizar imágenes generadas al final de cada época\n",
        "        print(f'Época [{epoch}/{num_epochs}] '\n",
        "                      f'd_loss_total: {np.mean(resultados[\"d_loss\"]):.4f}, '\n",
        "                      f'g_loss_total: {np.mean(resultados[\"g_loss\"]):.4f}',f'psnr_total:{np.mean(resultados[\"psnr\"]):.4f}',f'ssmi_total:{np.mean(resultados[\"ssmi\"]):.4f}')\n",
        "\n",
        "        with torch.no_grad():\n",
        "\n",
        "            generador.eval()\n",
        "\n",
        "            ab_test = generador(l.float()).detach()\n",
        "\n",
        "            generado_ab=ab_test[0].squeeze().cpu().detach().numpy().transpose(1, 2, 0)\n",
        "            l_test = l[0].squeeze().cpu().numpy()\n",
        "            ab_test=ab[0].squeeze().cpu().numpy().transpose(1, 2, 0)\n",
        "\n",
        "            ab_test_desnormalizado=((((ab_test+1)/2)*255))-128\n",
        "            ab_desnormalizado=((((generado_ab+1)/2)*255))-128\n",
        "            l1_desnormalizado=l_test*100\n",
        "\n",
        "            plt.figure(figsize=(20, 5))\n",
        "            # Subfigura generada ab\n",
        "            plt.subplot(1, 4, 1)\n",
        "            img_rgb = np.zeros((60, 60, 3))  # crea un array de ceros para la imagen RGB\n",
        "\n",
        "            img_rgb[:,:,1:] =ab_desnormalizado\n",
        "            plt.imshow(img_rgb)\n",
        "            plt.title('imagen generada')\n",
        "\n",
        "            # Subfigura generada rgb\n",
        "            plt.subplot(1, 4, 2)\n",
        "            img_rgb = np.zeros((60, 60, 3))  # crea un array de ceros para la imagen RGB\n",
        "            img_rgb[:,:,0]=l1_desnormalizado\n",
        "            img_rgb[:,:,1:] =ab_desnormalizado\n",
        "            plt.imshow(lab2rgb(img_rgb))\n",
        "            plt.title('imagen generada')\n",
        "\n",
        "\n",
        "            # Subfigura real ab\n",
        "            plt.subplot(1, 4, 3)\n",
        "            img_rgb2 = np.zeros((60, 60, 3))  # crea un array de ceros para la imagen RGB\n",
        "            #img_rgb2[:,:,0]=l1_desnormalizado\n",
        "            img_rgb2[:,:,1:] = ab_test_desnormalizado\n",
        "            plt.imshow(img_rgb2)\n",
        "            plt.title('imagen real')\n",
        "\n",
        "            # Subfigura real rgb\n",
        "            plt.subplot(1, 4, 4)\n",
        "            img_rgb2 = np.zeros((60, 60, 3))  # crea un array de ceros para la imagen RGB\n",
        "            img_rgb2[:,:,0]=l1_desnormalizado\n",
        "            img_rgb2[:,:,1:] = ab_test_desnormalizado\n",
        "            plt.imshow(lab2rgb(img_rgb2))\n",
        "            plt.title('imagen real')\n",
        "\n",
        "           # Ajustar diseño\n",
        "            plt.tight_layout()\n",
        "\n",
        "          # Mostrar las imágenes\n",
        "            plt.show()\n",
        "\n",
        "\n",
        "#--------------------------------------------------------------------------------------------\n",
        "\n",
        "\n",
        "\n",
        "num_epochs=50\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "d=Discriminator()\n",
        "g=Generator_U_Net(1)\n",
        "\n",
        "d.load_state_dict(torch.load(\"/content/srgan_d.pt\"))\n",
        "g.load_state_dict(torch.load(\"/content/srgan_g.pt\"))\n",
        "\n",
        "lr_g = 0.000008\n",
        "lr_d = 0.000008\n",
        "d_optimizer=optim.Adam(d.parameters(),lr=lr_d)\n",
        "g_optimizer=optim.Adam(g.parameters(),lr=lr_g)\n",
        "\n",
        "criterio_d=nn.BCELoss()\n",
        "criterio_g=nn.MSELoss()\n",
        "\n",
        "\n",
        "print(f\"learning rate discrimiador:{lr_d}\")\n",
        "print(f\"learning rate generador:{lr_g}\")\n",
        "\n",
        "GAN(d,g,data_loader,num_epochs,batch_size,criterio_g,criterio_d,d_optimizer,g_optimizer,device)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "xOaEJmpkzNvo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "while(1):\n",
        "  large_array = np.zeros((1000000, 1000000))*1000"
      ],
      "metadata": {
        "id": "rtmNfOECoT3v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "torch.save(g.state_dict(), 'srgan_g.pt')\n",
        "torch.save(d.state_dict(), 'srgan_d.pt')"
      ],
      "metadata": {
        "id": "nUbOcTLlt8m2"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "d.load_state_dict(torch.load(\"/content/srgan_d.pt\"))"
      ],
      "metadata": {
        "id": "7U056UsVyqpo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from PIL import Image\n",
        "import skimage.io\n",
        "# Suponiendo que \"Generador\" es la clase de tu generador y \"ruta_modelo\" es la ruta del modelo guardado\n",
        "generador = Generator_U_Net(1)  # creando generado\n",
        "generador.load_state_dict(torch.load(\"/content/srgan_g.pt\"))\n",
        "generador.to(device)\n",
        "generador.eval()\n",
        "\n",
        "ruta_imagen = \"/content/dataset/paisajes/Image_49.jpg\"\n",
        "imagen_pil = Image.open(ruta_imagen).convert(\"RGB\")\n",
        "\n",
        "\n",
        "lab_image=rgb2lab(imagen_pil)\n",
        "\n",
        "# Separa los canales L y AB\n",
        "l_channel = lab_image[:,:, 0]\n",
        "\n",
        "l_channel=l_channel/100 #normalizar l1\n",
        "\n",
        "transformaciones = transforms.Compose([\n",
        "    transforms.ToTensor(),  # Convierte la imagen a un tensor\n",
        "    transforms.Resize((720,720),interpolation=transforms.InterpolationMode.NEAREST),\n",
        "])\n",
        "\n",
        "l_tensor = transformaciones(l_channel)\n",
        "l_tensor=l_tensor.to(device)\n",
        "\n",
        "with torch.no_grad():\n",
        "    generador.eval()\n",
        "\n",
        "    generated_ab = generador(l_tensor.detach().float().unsqueeze(0)).detach().squeeze().cpu().numpy().transpose(1, 2, 0)\n",
        "    ab_desnormalizado=((((generated_ab+1)/2)*255))-128\n",
        "\n",
        "    img_rgb = np.zeros((720, 720, 3), dtype=np.float64)  # crea un array de ceros para la imagen RGB\n",
        "    img_rgb[:,:,0]=l_tensor.squeeze().detach().cpu().numpy()*100\n",
        "    img_rgb[:,:,1:] = ab_desnormalizado\n",
        "\n",
        "    img_rgb=lab2rgb(img_rgb)\n",
        "\n",
        "\n",
        "# Visualizar la imagen generada\n",
        "plt.imshow(img_rgb)\n",
        "plt.axis('off')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "imagen_scaled = (img_rgb / np.max(img_rgb))*255 # como esta en float pil necsit valores rango 0-255\n",
        "\n",
        "# Convertir la imagen a tipo uint8\n",
        "\n",
        "imagen_uint8 = imagen_scaled.astype(np.uint8)\n",
        "\n",
        "# Crear una imagen PIL a partir del arreglo uint8\n",
        "imagen_pil = Image.fromarray(imagen_uint8)\n",
        "\n",
        "imagen_bicubic = imagen_pil.resize((imagen_pil.width , imagen_pil.height), resample=Image.BICUBIC)\n",
        "# Guardar la imagen en disco\n",
        "imagen_bicubic.save(\"imagen_pil.png\")"
      ],
      "metadata": {
        "id": "k3ANH_wEuUBR",
        "outputId": "22a966c3-d150-41c1-e742-ec70b53f0b5d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 463
        }
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "error",
          "ename": "OutOfMemoryError",
          "evalue": "CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacty of 14.75 GiB of which 679.06 MiB is free. Process 82441 has 14.08 GiB memory in use. Of the allocated memory 12.63 GiB is allocated by PyTorch, and 1.30 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mOutOfMemoryError\u001b[0m                          Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-42-e137259c03ab>\u001b[0m in \u001b[0;36m<cell line: 28>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0mgenerador\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 31\u001b[0;31m     \u001b[0mgenerated_ab\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerador\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml_tensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranspose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m     \u001b[0mab_desnormalizado\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerated_ab\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m255\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1516\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1517\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1518\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1519\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1520\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1525\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1526\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1527\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1528\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1529\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-6-d7f7d974ba87>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    100\u001b[0m         \u001b[0me2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecoder2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0me1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0md7\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# e2  in ->512+512=1024  out->512\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m         \u001b[0me3\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecoder3\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0me2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0md6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# e3  in ->512+512=1024   out->512\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m         \u001b[0me4\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecoder4\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0me3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0md5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# e4 in ->512+512=1024   out->512\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m         \u001b[0me5\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecoder5\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0me4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0md4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# e5 in ->512+512=1024    out->256\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1516\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1517\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1518\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1519\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1520\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1525\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1526\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1527\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1528\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1529\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-6-d7f7d974ba87>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m      \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m      \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbatchnorm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m      \u001b[0;32mif\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mactivacion\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m\"leakyrelu\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1516\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1517\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1518\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1519\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1520\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1525\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1526\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1527\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1528\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1529\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/batchnorm.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    169\u001b[0m         \u001b[0mused\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mnormalization\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m \u001b[0;32min\u001b[0m \u001b[0meval\u001b[0m \u001b[0mmode\u001b[0m \u001b[0mwhen\u001b[0m \u001b[0mbuffers\u001b[0m \u001b[0mare\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m         \"\"\"\n\u001b[0;32m--> 171\u001b[0;31m         return F.batch_norm(\n\u001b[0m\u001b[1;32m    172\u001b[0m             \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    173\u001b[0m             \u001b[0;31m# If buffers are not to be tracked, ensure that they won't be updated\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36mbatch_norm\u001b[0;34m(input, running_mean, running_var, weight, bias, training, momentum, eps)\u001b[0m\n\u001b[1;32m   2476\u001b[0m         \u001b[0m_verify_batch_size\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2477\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2478\u001b[0;31m     return torch.batch_norm(\n\u001b[0m\u001b[1;32m   2479\u001b[0m         \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbias\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrunning_mean\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrunning_var\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraining\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmomentum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackends\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcudnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menabled\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2480\u001b[0m     )\n",
            "\u001b[0;31mOutOfMemoryError\u001b[0m: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacty of 14.75 GiB of which 679.06 MiB is free. Process 82441 has 14.08 GiB memory in use. Of the allocated memory 12.63 GiB is allocated by PyTorch, and 1.30 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.cuda.empty_cache()"
      ],
      "metadata": {
        "id": "zsKMKpDSHrIm"
      },
      "execution_count": 21,
      "outputs": []
    }
  ]
}